{"version":3,"sources":["utils/Api.js","components/Login.js","components/Home.js","components/Register.js","components/Stock.js","components/Profile.js","App.js","serviceWorker.js","index.js"],"names":["url","username","email","password","a","axios","post","Login","callback","useState","apireturn","setApiReturn","show","setShow","setEmail","setPassword","history","useHistory","className","Toast","onClose","delay","autohide","Body","onSubmit","event","preventDefault","UserLogin","then","response","cookie","save","path","push","catch","error","data","FormGroup","controlId","FormLabel","FormControl","autoFocus","type","value","onChange","target","Button","block","disabled","length","href","Home","align","Register","setUsername","UserRegister","Stock","Profile","App","props","isAuth","undefined","load","state","renderLogin","bind","this","setState","status","remove","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","Link","onClick","variant","exact","from","to","renderNavbar","render","component","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"gcAEMA,EAAM,U,4CAEL,WAA4BC,EAAUC,EAAOC,GAA7C,SAAAC,EAAA,sEACUC,IAAMC,KAAKN,EAAM,YAAa,CACvCC,WAAUC,QAAOC,aAFlB,oF,kEAMA,WAAyBD,EAAOC,GAAhC,SAAAC,EAAA,sEACUC,IAAMC,KAAKN,EAAM,SAAU,CACpCE,MAAOA,EACPC,SAAUA,IAHX,oF,gCC6DQI,EA9DD,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAEMC,mBAAS,IAFf,mBAErBC,EAFqB,KAEVC,EAFU,OAGNF,oBAAS,GAHH,mBAGvBG,EAHuB,KAGjBC,EAHiB,OAIJJ,mBAAS,IAJL,mBAIvBP,EAJuB,KAIhBY,EAJgB,OAKEL,mBAAS,IALX,mBAKvBN,EALuB,KAKbY,EALa,KAOxBC,EAAUC,cAmBhB,OACE,yBAAKC,UAAU,SACb,kBAACC,EAAA,EAAD,CAAOC,QAAS,kBAAMP,GAAQ,IAAQD,KAAMA,EAAMS,MAAO,IAAMC,UAAQ,GACrE,kBAACH,EAAA,EAAMI,KAAP,KAAab,IAEf,0BAAMc,SAlBV,SAAsBC,GACpBA,EAAMC,iBDbH,SAAP,oCCeIC,CAAUzB,EAAOC,GAAUyB,MAAK,SAACC,GAC/BC,IAAOC,KAAK,KAAM,OAAQ,CAAEC,KAAM,MAClCxB,GAAS,GACTQ,EAAQiB,KAAK,YACZC,OAAM,SAACC,GACRxB,EAAawB,EAAMN,SAASO,MAC5BvB,GAAQ,QAUN,kBAACwB,EAAA,EAAD,CAAWC,UAAU,SACnB,kBAACC,EAAA,EAAD,cACA,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,KAAK,QACLC,MAAOzC,EACP0C,SAAU,SAACnB,GAAD,OAAWX,EAASW,EAAMoB,OAAOF,WAG/C,kBAACN,EAAA,EAAD,CAAWC,UAAU,YACnB,kBAACC,EAAA,EAAD,iBACA,kBAACC,EAAA,EAAD,CACEG,MAAOxC,EACPyC,SAAU,SAACnB,GAAD,OAAWV,EAAYU,EAAMoB,OAAOF,QAC9CD,KAAK,cAGT,kBAACI,EAAA,EAAD,CAAQC,OAAK,EAACC,WAvCX9C,EAAM+C,OAAS,GAAK9C,EAAS8C,OAAS,GAuCAP,KAAK,UAA9C,SAGA,uBAAGxB,UAAU,iBACX,uBAAGgC,KAAK,aAAR,cACC,IAFH,6BCjDOC,EAVF,kBACX,yBAAKjC,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YAAYkC,MAAM,UAC/B,wCCEO,SAASC,IAAY,IAAD,EACC5C,mBAAS,IADV,mBAC1BC,EAD0B,KACfC,EADe,OAETF,oBAAS,GAFA,mBAE1BG,EAF0B,KAEpBC,EAFoB,OAGPJ,mBAAS,IAHF,mBAG1BP,EAH0B,KAGnBY,EAHmB,OAIDL,mBAAS,IAJR,mBAI1BR,EAJ0B,KAIhBqD,EAJgB,OAKD7C,mBAAS,IALR,mBAK1BN,EAL0B,KAKhBY,EALgB,KAO3BC,EAAUC,cAgBhB,OACE,yBAAKC,UAAU,SACb,kBAACC,EAAA,EAAD,CAAOC,QAAS,kBAAMP,GAAQ,IAAQD,KAAMA,EAAMS,MAAO,IAAMC,UAAQ,GACrE,kBAACH,EAAA,EAAMI,KAAP,KAAab,IAEf,0BAAMc,SAfV,SAAsBC,GACpBA,EAAMC,iBHlBH,SAAP,sCGmBI6B,CAAatD,EAAUC,EAAOC,GAAUyB,MAAK,SAACC,GAC5Cb,EAAQiB,KAAK,aACZC,OAAM,SAACC,GACRxB,EAAawB,EAAMN,SAASO,MAC5BvB,GAAQ,QAUN,kBAACwB,EAAA,EAAD,CAAWC,UAAU,SACnB,kBAACC,EAAA,EAAD,cACA,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,KAAK,QACLC,MAAOzC,EACP0C,SAAU,SAACnB,GAAD,OAAWX,EAASW,EAAMoB,OAAOF,WAG/C,kBAACN,EAAA,EAAD,CAAWC,UAAU,YACnB,kBAACC,EAAA,EAAD,iBACA,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,KAAK,OACLC,MAAO1C,EACP2C,SAAU,SAACnB,GAAD,OAAW6B,EAAY7B,EAAMoB,OAAOF,WAGlD,kBAACN,EAAA,EAAD,CAAWC,UAAU,YACnB,kBAACC,EAAA,EAAD,iBACA,kBAACC,EAAA,EAAD,CACEG,MAAOxC,EACPyC,SAAU,SAACnB,GAAD,OAAWV,EAAYU,EAAMoB,OAAOF,QAC9CD,KAAK,cAGT,kBAACI,EAAA,EAAD,CAAQC,OAAK,EAACC,WA7CX9C,EAAM+C,OAAS,GAAK9C,EAAS8C,OAAS,GAAKhD,EAASgD,OAAS,GA6CvBP,KAAK,UAA9C,cC7DR,IAMec,EAND,kBACZ,6BACE,uCCIWC,EANC,kBACd,6BACE,yCCyGWC,E,kDA/Fb,WAAYC,GAAQ,IAAD,sBACjB,cAAMA,GACN,IAAMC,OAAgCC,IAAtB/B,IAAOgC,KAAK,MAFX,OAGjB,EAAKC,MAAQ,CACXH,UAEF,EAAKI,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKzD,SAAW,EAAKA,SAASyD,KAAd,gBAPC,E,gEAWjB,IAAML,OAAgCC,IAAtB/B,IAAOgC,KAAK,MAC5BI,KAAKC,SAAS,CACZP,a,+BAIKQ,GACPF,KAAKC,SAAS,CACZP,OAAQQ,IAELA,GACHtC,IAAOuC,OAAO,Q,oCAKhB,OACE,kBAAC,EAAD,CAAO7D,SAAU0D,KAAK1D,a,qCAIV,IAAD,OAEb,OADmB0D,KAAKH,MAAhBH,OAsBN,6BACE,kBAACU,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcvB,KAAK,SAAnB,YACA,kBAACoB,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAK5D,UAAU,WACb,kBAAC4D,EAAA,EAAIC,KAAL,CAAU7B,KAAK,SAAf,QACA,kBAAC4B,EAAA,EAAIC,KAAL,CAAU7B,KAAK,YAAf,WACA,kBAAC4B,EAAA,EAAIC,KAAL,CAAU7B,KAAK,UAAf,UAEF,kBAAC4B,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIC,KAAL,CAAU7B,KAAK,SACb,kBAACJ,EAAA,EAAD,CAAQkC,QAAS,kBAAM,EAAKxE,UAAS,IAAQyE,QAAQ,UAArD,eA/BR,6BACE,kBAACX,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcvB,KAAK,SAAnB,YACA,kBAACoB,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAK5D,UAAU,WACb,kBAAC4D,EAAA,EAAIC,KAAL,CAAU7B,KAAK,SAAf,SAEF,kBAAC4B,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIC,KAAL,CAAU7B,KAAK,UACb,kBAACJ,EAAA,EAAD,CAAQmC,QAAQ,WAAhB,gB,+BA+Bd,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUC,OAAK,EAACC,KAAK,IAAIC,GAAG,WAE9B,6BACGlB,KAAKmB,eACN,kBAAC,IAAD,CAAOrD,KAAK,SAASsD,OAAQpB,KAAKF,cAClC,kBAAC,IAAD,CAAOhC,KAAK,QAAQuD,UAAWpC,IAC/B,kBAAC,IAAD,CAAOnB,KAAK,YAAYuD,UAAWlC,IACnC,kBAAC,IAAD,CAAOrB,KAAK,SAASuD,UAAW/B,IAChC,kBAAC,IAAD,CAAOxB,KAAK,WAAWuD,UAAW9B,U,GAzF1B+B,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OACP,kBAAC,IAAMS,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxE,MAAK,SAAAyE,GACJA,EAAaC,gBAEdpE,OAAM,SAAAC,GACLoE,QAAQpE,MAAMA,EAAMqE,c","file":"static/js/main.d4c75539.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst url = \"mon url\";\n\nexport async function UserRegister(username, email, password) {\n    return await axios.post(url + \"/register\", {\n        username, email, password,\n    })\n}\n\nexport async function UserLogin(email, password) {\n    return await axios.post(url + \"/login\", {\n        email: email,\n        password: password,\n    })\n}\n\n","import React, { useState } from 'react';\nimport {\n  Button, FormGroup, FormControl, FormLabel, Toast,\n} from 'react-bootstrap';\nimport { useHistory } from 'react-router-dom';\nimport cookie from 'react-cookies';\nimport { UserLogin } from '../utils/Api';\nimport '../css/Login.css';\n\nconst Login = ({ callback }) => {\n  // eslint-disable-next-line\n    const [apireturn, setApiReturn] = useState(\"\");\n  const [show, setShow] = useState(false);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const history = useHistory();\n\n  function validateForm() {\n    return email.length > 0 && password.length > 0;\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    // eslint-disable-next-line no-unused-vars\n    UserLogin(email, password).then((response) => {\n      cookie.save('id', 'Toto', { path: '/' });\n      callback(true);\n      history.push('/home');\n    }).catch((error) => {\n      setApiReturn(error.response.data);\n      setShow(true);\n    });\n  }\n\n  return (\n    <div className=\"Login\">\n      <Toast onClose={() => setShow(false)} show={show} delay={3000} autohide>\n        <Toast.Body>{apireturn}</Toast.Body>\n      </Toast>\n      <form onSubmit={handleSubmit}>\n        <FormGroup controlId=\"email\">\n          <FormLabel>Email</FormLabel>\n          <FormControl\n            autoFocus\n            type=\"email\"\n            value={email}\n            onChange={(event) => setEmail(event.target.value)}\n          />\n        </FormGroup>\n        <FormGroup controlId=\"password\">\n          <FormLabel>Password</FormLabel>\n          <FormControl\n            value={password}\n            onChange={(event) => setPassword(event.target.value)}\n            type=\"password\"\n          />\n        </FormGroup>\n        <Button block disabled={!validateForm()} type=\"submit\">\n          Login\n        </Button>\n        <p className=\"Register_text\">\n          <a href=\"/register\">Click Here</a>\n          {' '}\n          to create your account\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default Login;\n","import React from 'react';\n\nconst Home = () => (\n  <div className=\"container\">\n    <div className=\"row\">\n      <div className=\"col-md-12\" align=\"center\">\n        <h1>Home</h1>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Home;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n  Button, FormGroup, FormControl, FormLabel, Toast,\n} from 'react-bootstrap';\nimport { UserRegister } from '../utils/Api';\nimport '../css/Login.css';\n\nexport default function Register() {\n  const [apireturn, setApiReturn] = useState('');\n  const [show, setShow] = useState(false);\n  const [email, setEmail] = useState('');\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const history = useHistory();\n\n  function validateForm() {\n    return email.length > 0 && password.length > 0 && username.length > 0;\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    UserRegister(username, email, password).then((response) => {\n      history.push('/login');\n    }).catch((error) => {\n      setApiReturn(error.response.data);\n      setShow(true);\n    });\n  }\n\n  return (\n    <div className=\"Login\">\n      <Toast onClose={() => setShow(false)} show={show} delay={3000} autohide>\n        <Toast.Body>{apireturn}</Toast.Body>\n      </Toast>\n      <form onSubmit={handleSubmit}>\n        <FormGroup controlId=\"email\">\n          <FormLabel>Email</FormLabel>\n          <FormControl\n            autoFocus\n            type=\"email\"\n            value={email}\n            onChange={(event) => setEmail(event.target.value)}\n          />\n        </FormGroup>\n        <FormGroup controlId=\"username\">\n          <FormLabel>Username</FormLabel>\n          <FormControl\n            autoFocus\n            type=\"text\"\n            value={username}\n            onChange={(event) => setUsername(event.target.value)}\n          />\n        </FormGroup>\n        <FormGroup controlId=\"password\">\n          <FormLabel>Password</FormLabel>\n          <FormControl\n            value={password}\n            onChange={(event) => setPassword(event.target.value)}\n            type=\"password\"\n          />\n        </FormGroup>\n        <Button block disabled={!validateForm()} type=\"submit\">\n          Register\n        </Button>\n      </form>\n    </div>\n  );\n}\n","import React from 'react';\n\nconst Stock = () => (\n  <div>\n    <h1>Stock</h1>\n  </div>\n);\n\nexport default Stock;\n","import React from 'react';\n\nconst Profile = () => (\n  <div>\n    <h1>Profile</h1>\n  </div>\n);\n\nexport default Profile;\n","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  BrowserRouter as Router, Route, Switch, Redirect,\n} from 'react-router-dom';\nimport { Nav, Navbar, Button } from 'react-bootstrap';\nimport cookie from 'react-cookies';\nimport Login from './components/Login';\nimport Home from './components/Home';\nimport Register from './components/Register';\nimport Stock from './components/Stock';\nimport Profile from './components/Profile';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const isAuth = (cookie.load('id') !== undefined);\n    this.state = {\n      isAuth,\n    };\n    this.renderLogin = this.renderLogin.bind(this);\n    this.callback = this.callback.bind(this);\n  }\n\n  componentDidMount() {\n    const isAuth = (cookie.load('id') !== undefined);\n    this.setState({\n      isAuth,\n    });\n  }\n\n  callback(status) {\n    this.setState({\n      isAuth: status,\n    });\n    if (!status) {\n      cookie.remove('id');\n    }\n  }\n\n  renderLogin() {\n    return (\n      <Login callback={this.callback} />\n    );\n  }\n\n  renderNavbar() {\n    const { isAuth } = this.state;\n    if (!isAuth) {\n      return (\n        <div>\n          <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand href=\"/home\">Cocolito</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n              <Nav className=\"mr-auto\">\n                <Nav.Link href=\"/home\">Home</Nav.Link>\n              </Nav>\n              <Nav>\n                <Nav.Link href=\"/login\">\n                  <Button variant=\"primary\">Login</Button>\n                </Nav.Link>\n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n        </div>\n      );\n    }\n    return (\n      <div>\n        <Navbar bg=\"light\" expand=\"lg\">\n          <Navbar.Brand href=\"/home\">Cocolito</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link href=\"/home\">Home</Nav.Link>\n              <Nav.Link href=\"/profile\">Profile</Nav.Link>\n              <Nav.Link href=\"/stock\">Stock</Nav.Link>\n            </Nav>\n            <Nav>\n              <Nav.Link href=\"/home\">\n                <Button onClick={() => this.callback(false)} variant=\"danger\">Logout</Button>\n              </Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Redirect exact from=\"/\" to=\"/home\" />\n        </Switch>\n        <div>\n          {this.renderNavbar()}\n          <Route path=\"/login\" render={this.renderLogin} />\n          <Route path=\"/home\" component={Home} />\n          <Route path=\"/register\" component={Register} />\n          <Route path=\"/stock\" component={Stock} />\n          <Route path=\"/profile\" component={Profile} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}